#!/usr/bin/env node

/*
Panda - A total documentation build system for technical writers, and those who want to be like them.

Copyright (C) 2012 Garen J. Torikian, licensed under GPL.
*/

var panda = require('../index.js'),
    fs = require('fs'),
    path = require('path'),
    wrench = require('wrench'),
    funcDocs = require('functional-docs');

var async = require('async');
var helpers = require('../lib/helpers');

var cli = require('../lib/cli');

var panda_docs = exports;
var manifestFile;


panda_docs.make = exports.make = function(manifestFile, args, callback) {
    var options = cli.parseArgs();

    for (var key in args) {
      if (args.hasOwnProperty(key)) {
        options[key] = args[key];
      }
    }

    destDir = options.output;

    manifests = [];

    wrench.rmdirSyncRecursive(destDir, true);
    wrench.mkdirSyncRecursive(destDir, 0777);

    cbReturn = {};
    cbReturn.files = [ ];

    async.series([
        function(cb) {
          if (manifestFile !== undefined && fs.statSync(manifestFile))  {
              console.log("Generating documentation from manifest '" + manifestFile + "'");
              panda.open(manifestFile, function(err) {
                cb(null);
              });
          }
          else {
            console.error("Manifest " + manifestFile + " doesn't appear to exist!");
            process.exit(1);
          }
        },
        function(cb) {
          panda.makeConrefs(function () {
            cb(null);
          });
        },
        function(cb) {
          panda.createGenerator(options, function() {
            cb(null);
          });
        },
        function(cb) {
          console.log(options)
          panda.copyAssets(options.assets, options.outputAssets, function() {
            cb(null);
          });
        },
        function(cb) {
          panda.copyResources(options.output, function() {
            cb(null);
          });
        },
        function(cb) {
          panda.render(cbReturn, function(err) {
            cb(err);
          });
        }
    ], function(err, results) {
        if (err) return callback(err);

      if (options.disableTests !== true) {
          funcDocs.runTests([destDir], {stopOnFail: false, ext: ".html"}, function(err) {
                if (err) return callback(err);

              console.log("Finished " + manifestFile + " generation");
              return callback(null, cbReturn);
          });
      }
      else
        return callback(null, cbReturn);
    });
}

// Not from the outside? Then it's from the command line
if (!module.parent) {
    exports.make(process.argv.slice(2), function(err) {
        if (err) {
            console.error(err);
            process.exit(1);
        }
        process.exit(0);
    });
}
