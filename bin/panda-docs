#!/usr/bin/env node

/*
Panda - A total documentation build system for technical writers, and those who want to be like them.

Copyright (C) 2012 Garen J. Torikian, licensed under GPL.
*/

var panda = require('../index.js'),
    fs = require('fs'),
    path = require('path'),
    nomnom = require('nomnom');

var async = require('async');
var helpers = require('../lib/helpers');

var panda_docs = exports;
var manifestFile;

panda_docs.make = exports.make = function(args, callback) {
    var options = nomnom
      .option('manifestPath', {
        position: 0,
        list: false,
        required: true,
        help: 'The location of the manifest file',
        metavar: 'String'
      })
      .option('output', {
        abbr: 'o',
        list: false,
        required: false,
        help: 'Resulting file(s) location [out]',
        metavar: 'String',
        default: 'out'
      })
      .option('outputAssets', {
        list: false,
        required: false,
        full: 'outputAssets',
        help: 'Resulting file(s) location for assets [out/assets]',
        metavar: 'String',
        default: 'out/assets'
      })
      .option('help', {
        abbr: 'h',
        full: 'help',
        help: 'Displays this help information',
        default: false
      })
      .option('title', {
        abbr: 't',
        full: 'title',
        help: 'Title of the index page [Panda: Default Title Here]',
        metavar: 'String',
        default: 'Panda: Default Title Here'
      })
      .option('template', {
        full: 'template',
        help: 'The location of your Jade templates',
        metavar: 'String',
        default: './templates/default/layout.jade'
      })  
      .option('assets', {
        full: 'assets',
        help: 'The location of your asset files (CSS, Javascript, e.t.c.)',
        metavar: 'String',
        default: './templates/default/assets'
      })
      .option('resources', {
        required: false,
        full: 'resources',
        help: 'An array of directories to also copy into the _/out_ directory',
        metavar: 'String'
      })
      .option('noHeader', {
        full: 'noheader',
        help: 'Hides the header',
        flag: true
      })
      .option('noToc', {
        full: 'notoc',
        help: 'Hides the table of contents sidebar',
        flag: true
      })
      .option('baseUrl', {
        full: 'baseurl',
        help: 'Base url of all links [./]',
        metavar: 'String',
        default: './'
      })
      .parse(args);

    destDir = options.output || './out';
    manifestFile = options.manifestPath || args[0];

    manifests = [];

    if (!path.existsSync(destDir)) {
      fs.mkdirSync(destDir);
    }

    async.series([
        function(cb) {
          if (manifestFile !== undefined && fs.statSync(manifestFile))  {
              console.log("Generating documentation from manifest '" + manifestFile + "'");
              panda.open(manifestFile, function(err) {
                cb(null);
              });
          }
          else {
            console.error("Manifest " + manifestFile + " doesn't appear to exist!");
            process.exit(1);
          }
        },
        function(cb) {
          panda.makeConrefs(function () {
            cb(null);
          });
        },
        function(cb) {
          panda.createGenerator(options, function() {
            cb(null);
          });
        },
        function(cb) {
          panda.copyAssets(options.assets, options.outputAssets, function() {
            cb(null);
          });
        },
        function(cb) {
          panda.copyResources(options.resources, options.output, function() {
            cb(null);
          });
        },
        function(cb) {
          panda.render(function() {
            cb(null);
          });
        }
    ], function(err, results) {
        console.log("Finished " + manifestFile + " generation");
        callback(err, results);
    });
}

// Not from the outside? Then it's from the command line
if (!module.parent) {
    exports.make(process.argv.slice(2), function(err) {
        if (err) {
            console.error(err);
            process.exit(1);
        }
        process.exit(0);
    });
}
